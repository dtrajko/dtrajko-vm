---
- name: "create {{ owner_group }} group"
  group:
    name: "{{ owner_group }}"
    gid: "{{ gid_start }}"
    state: present
- name: create apache group
  group:
    name: apache
    gid: "{{ gid_start + 4 }}"
    state: present
- name: create nginx group
  group:
    name: nginx
    gid: "{{ gid_start + 8 }}"
    state: present
- name: create memcached group
  group:
    name: memcached
    gid: "{{ gid_start + 12 }}"
    state: present
- name: create mysql group
  group:
    name: mysql
    gid: "{{ gid_start + 16 }}"
    state: present
- name: "create user {{ owner_username }}"
  user:
    name: "{{ owner_username }}"
    uid: "{{ uid_start }}"
    group: "{{ owner_group }}"
    groups:
      - apache
      - vagrant
    home: "/home/{{ owner_username }}"
    state: present
- name: create user apache
  user:
    name: apache
    uid: "{{ uid_start + 4 }}"
    group: apache
    groups:
      - "{{ owner_group }}"
    shell: /sbin/nologin
    state: present
- name: create user nginx
  user:
    name: nginx
    uid: "{{ uid_start + 8 }}"
    group: nginx
    groups:
      - "{{ owner_group }}"
    shell: /sbin/nologin
    state: present
- name: create user beanstalkd
  user:
    name: beanstalkd
    uid: "{{ uid_start + 12 }}"
    group: "{{ owner_group }}"
    home: /home/beanstalkd
    shell: /sbin/nologin
    state: present
- name: create user memcached
  user:
    name: memcached
    uid: "{{ uid_start + 16 }}"
    group: memcached
    shell: /sbin/nologin
    state: present
- name: create user mysql
  user:
    name: mysql
    uid: "{{ uid_start + 20 }}"
    group: mysql
    shell: /sbin/nologin
    state: present
- name: "Add users vagrant and {{ owner_username }} to sudoers, no password required"
  lineinfile:
    path: /etc/sudoers
    line: "{{ item.line }}"
    backup: yes
    state: present
    insertafter: EOF
  with_items:
    - { line: "" }
    - { line: "vagrant  ALL=(ALL)  NOPASSWD:ALL" }
    - { line: "{{ owner_username }}  ALL=(ALL)  NOPASSWD:ALL" }

- name: "Create dir /home/{{ owner_username }}/.ssh"
  file:
    path: "/home/{{ owner_username }}/.ssh"
    state: directory
    owner: "{{ owner_username }}"
    group: "{{ owner_group }}"
    mode: 0700

- name: "Add public key for user {{ owner_username }}"
  copy:
    src: files/ssh/id_rsa.pub
    dest: "/home/{{ owner_username }}/.ssh/id_rsa.pub"
    owner: "{{ owner_username }}"
    group: "{{ owner_group }}"
    mode: 0600

- name: "Set authorized key for user {{ owner_username }}"
  authorized_key:
    user: "{{ owner_username }}"
    state: present
    key: "{{ lookup('file', 'files/ssh/id_rsa.pub') }}"

- name: Set the proper SSH permissions for the authorized_keys file
  file:
    path: "/home/{{ owner_username }}/.ssh/authorized_keys"
    owner: "{{ owner_username }}"
    group: "{{ owner_group }}"
    mode: 0600

- name: Set a password for user 'root'
  expect:
    command: passwd
    responses:
      "New password:": "{{ root_password }}"
      "Retype new password:": "{{ root_password }}"
  become: true
  become_user: root

- name: "Set a password for user '{{ owner_username }}'"
  expect:
    command: "passwd {{ owner_username }}"
    responses:
      "New password:": "{{ vm_owner_password }}"
      "Retype new password:": "{{ vm_owner_password }}"
  become: true
  become_user: root
